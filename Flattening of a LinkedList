// C++ Code
/*
 * Definition for linked list.
 * class Node {
 *  public:
 *		int data;
 *		Node *next;
 * 		Node *child;
 *		Node() : data(0), next(nullptr), child(nullptr){};
 *		Node(int x) : data(x), next(nullptr), child(nullptr) {}
 *		Node(int x, Node *next, Node *child) : data(x), next(next), child(child) {}
 * };
 */

Node* merge_list(Node* head1, Node* head2)
{
    Node* ans = NULL;
    Node* next = NULL;
    while(head1 && head2)
    {
        Node* temp;
        if(head1->data <= head2->data)
        {
            temp = head1;
            head1 = head1->child;
        }
        else
        {
            temp = head2;
            head2 = head2->child;
        }
        temp->child = NULL;
        // temp->next = NULL;
        if(ans == NULL)
        {
            ans = temp;
            next = temp;
        }
        else
        {
            next->child = temp;
            next = temp;
        }
    }
    if(head1)
        next->child = head1;
    if(head2)
        next->child = head2;
    return ans;
}

Node* flattenLinkedList(Node* head) 
{
	// Write your code here
    if(head == NULL || head->next == NULL)
        return head;
    Node* first = head;
    Node* sec = head->next;
    while(sec)
    {
        Node* third = sec->next;
        first->next = NULL;
        sec->next = NULL;
        first = merge_list(first, sec);
        sec = third;
    }
    // first->next = NULL;
    return first;
}
